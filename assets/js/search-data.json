{
  
    
        "post0": {
            "title": "Зеленият пръстен на София и евентуална кръгова линия на метрото - има ли нещо общо?",
            "content": "Поводът за този пост са напредналите планове за изграждането на зелен пръстен на София . Зеленият пръстен . Зеленият пръстен е интересен проект, който млади архитекти се опитват да прокарат от известно време насам. . На кратко: идеята е жп линията, която обхожда София, но от години не се използва да се превърне в линеен парк с зелена полоса, велопътека и различни съоръжения и атракциони обединени в споделено публично пространство. . . Аз лично приветствам това. . Темата на моя пост е не дали това е добра идея или не, а дали не може тази идея да се съчетае с идеята за кръгова линия на метрото, която беше предмет на обсъждане през последните 10-15г. . Евентуалната кръгова линия на метрото и възможните синергии с Зеления пръстен . Основният инициатор за такава кръгова линия беше “Спаси метрото”. . Доколкото разбирам,идеята е по-скоро за леко метро или скоростен трамвай отколкото за класическо метро, но се има предвид, че това би било безконфликтно трасе (т.е. подземно или издигнато). За по-просто ще използвам термина “метро”, но аргументите ми се общи и нямат връзка само с подземната или надземната форма. . . Трасето, който те предлагат се различава от трасето на Зеления пръстен, но има пресечни точки с него. И възниква въпросът - не може ли да се обединят тези идеи и да се потърсят евентуални синергии? . Подобни синергии съществуват в един от примерите посочени от инициаторите на Зеления пръстен - паркът Hamesila в Тел Авив. В този случай под трасето на стара жп линия минава тунел на леко метро, a отгоре е направен линеен парк. Изглежда, че двата проекта са планирани ако не синхронно, то поне не в изолация един от друг (или както казваме в България - “на парче”). . Има смисъл от подобна синергия по 2 причини: . ако двата проекта се съчетаят то административната работа ще отнеме по-малко усилия отколкото ако се работи по отделно . | ако двата проекта се обединят и трасето на евентуалната кръгова линия съвпада със сега неизползваната жп линия то това би отворило възможността за използване на някои по-евтини способи за прокопаване (напр. открит способ, плитко заложени тунели) в случай, че се приеме опцията за подземно метро. Ако се приеме опцията за издигнато трасе (по подобие на немските S-Bahn) то отново би имало смисъл двата проекта да се планират съвместно, а не “на парче”. . | . Но тук възниква въпросът - а има ли наистина нужда от кръгова линия и, ако да, дали трасето на старата жп линия е подходящо? . Има ли нужда от кръгова линия на метрото? . Известно е мнението на инж. Братоев, че София няма нужда от кръгова линия. Това той го изразявал многократно (най-ранната статия, която ми е попадала беше отпреди 12-13г, но не мога да я открия в момента) и всеки път споменава, че са правили изследване, което потвърждава, че трафикът няма да е достатъчен за кръгова линия и, че такива линии има само в градове с поне 5-6 милиона души население. . Въпросът за трафика е, разбира се, най-релевантен затова е добре изследването да е сравнително актуално. София се промени много за последните 15г. Новите линии на метрото започнаха да променят транспортните потоци. Също така е хубаво да се вземе предвид, че метрото действа като магнит за бъдещо строителство - дори и в определен момент трафикът да е слаб не значи непременно, че той ще остане такъв. Инвестиции като метрото са скъпи и би следвало да се мисли в перспектива от поне 10-15г. . Що се отнася до твърдението, на инж. Братоев, че кръгови линии има само в градове с население от поне 5-6 милиона, то оставам с впечатлението, че той си е съставил това мнение преди повече от 30г и след това не го е актуализирал. . Наистина ли само градове с над 5 млн жители имат кръгова линия? . През последните 30г кръгови линии се появиха в градове с население близко до софийското или дори по-малко. . Ето 4 примера от Европа: . Кръговата линия в Букурещ . През 1992г в Букурещ завършват кръговата линия М1 с обща дължина от 31км: . . Букурещ е с население от 2 млн, т.е. с около 1/3 по-голям от софийското, но изоставената жп. линия в София е значително по-къса - около 20км. . Т.е. евентуалното трасе на кръговата линия в София би била с около 1/3 по-къса от тази в Букурещ. . Също, не е казано, че кръговата линия трябва непременно да е във формата на затворен кръг и да използва цялото налично жп трасе - възможно е да е просто дъга, както е в ред др. метро системи (малко повече за това по-долу). . Кръговата линия в Осло . През 2006г в Осло бе завършена т.н. Ringbanen (на англ. Ring Line, на бъл. Кръгова Линия), която заедно със съществуващите линии създаде кръг с дължина от 8.3км около централната част на Осло. . . Като дължина тази кръгова линия е над 2 пъти по-къса от дължината на изоставената жп линия в София. Но и Осло е град със значително по-малко население - около 700х души (приблизително 2 пъти по-малко от населението на София). . Кръговата линия в Копенхаген . През 2019г в Копенхаген бе завършена кръгова линия (на дат. Cityringen, също обозначена като М3) с обща дължина от 15.5км. . . Като дължина тази линия се доближава до дължината на изоставената жп линия в София, а Копенхаген е със значително по-малко население от София (800хил). . Кръговата линия в Лисабон . През 2020г в Лисабон започна строежа на разширение на метромрежата, което заедно със съществуващите мрежи ще създаде кръгова линия около централната част на Лисабон: . . Също като Осло и Копенхаген Лисабон е с население значително под това на София (500хил). . Кръгова линия или просто дъга? . До тук дискусията беше основно за линии, които описват пълен кръг. Но, реално, това не е задължително да е така. Доста по-често се срещат случаите на линии-дъга. Метромрежите понякога включват повече от една такива дъги. Така, например, Виенското метро вкл. 2 дъги (U2 и U4), всяка от които които описва полу-кръг около централната част на града и продължава към по-крайни райони. Общата дължина на тези 2 линии е 33.2км. . . Виена е по-голяма от София (прибл. 2 мил. жители), но и кръговото трасе у нас би било по-късо. . TL;DR . Зеленият пръстен е една прекрасна идея. Моето мнение е, че преди да се започне реалната работа в/у този проект би следвало да се обсъди евентуалните синергии с една кръгова или дъго-видна линия на метрото по същото трасе. . Това със сигурност би следвало да включи и по-актуално изследване на транспортните потоци в сравнение с това, което инж. Братоев цитира от над 10г насам. .",
            "url": "/2021/07/07/circle-line.html",
            "relUrl": "/2021/07/07/circle-line.html",
            "date": " • Jul 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Self-medication: not an alternative to the classical health service provision but an addition to it",
            "content": "Self-medication has a negative connotation attached to it. The established norm is that it is wrong. You are supposed to always consult your doctor. I am not sure how often this is said as a sort of legal hedge (‘I don’t want you to sue me’) or simply out of habit. . My argument is that self-medication is unavoidable and useful addition to the mainstream health service provision. . The practicalities . We have to admit that it is not practical to always consult your doctor. It means, at the very least, asking for an appointment and attending it. . Firstly, availability of an appointment can be a problem - for instance, my North London GP surgery usually gives appointments in a week at the earliest. . Secondly, attending to a doctor visit is not always convenient to fit in your schedule - you need to travel to the doctor’s office which may take time and might not fit well with your other commitments. The Covid pandemic changed a lot of things (e.g. increasing provision of telemedicine and a higher fraction of WFM) so this point might not be as relevant as it was before but it is still valid nonetheless. . And, thirdly, while the services of the GPs (and, sometimes, specialist doctors) are available free of cost in many European countries this is not the case everywhere in the world. So, there might be a cost associated with a visit to a dictor. . Thus, inevitably, for a lot of non-critical medical needs we rely on off-the-shelf medication or some other forms of self-treatment. My argument is that this is, actually, great. Not only it saves resources (valuable doctor time) but it may, actually, lead to a better outcome in terms of health and well-being. In the age of Google and Sci-Hub almost the entire medical knoweldge is available for free online. People should be encouraged to make use of it to self-educate about their medical needs. . My own experience . I am not a clinician but I spent a part of my professional experience in biomedical R&amp;D so I am used to reading academic papers in medicine and biology. Thus I am certainly not a complete layman. However, for my own medical needs and for those of relatives I have read a lot of papers that are far from my own expertise (which is confined to genomics, bioinformatics and data science). So I am aware that it takes time to familiarise with the concepts and the jargon of a particular medical field. . Still, I believe that many people can benefit from self-educating about their medical needs. I’ll list below my own experience with self-education and, occasionally, self-medication. . Sleep-related medication . My life includes periods when I was “burning the candle at both ends”. This involved mostly the years of graduate study but also some periods in my professional career. I tend to be more productive in the evenings and during the night so in such periods I aggressively invaded my night time and re-assigned it to work and study. While I was young (my 20s) this was not a big deal. But, later I found it increasingly difficult to cope with the consequences of sleep deprivation. So I started looking for a way to treat the consequences of my unhealthy work-life balance. . Modafinil . I stumbled on Modafinil by browsing various bio-hacking forums. Then I consulted the medical literature. The consensus was that it is both safe and effective in treating sleep deprivation. So back in 2010 I ordered a pack through one of the less-dodgy-looking internet pharmacies. . My experience with it was in line with the reports online - it is, indeed, very effective in treating sleep deprivation (a lot better than coffee). So it became a staple for me - it is, probably, the medicine I consumed most often over the last decade. Through experimentation I established that 100mg once a day suits me best - less than that I feel no effect, more than that does not help but may add some side-effects (palpitation). . While initially I was reliant on internet pharmacies at some point I went to my GP and simply confessed that I am using modafinil and asked for a prescription so that I can avoid the risks of online farmacies. He agreed so I started getting it through prescription. It tends to cost more than from some online farmacies but I don’t have to worry about the provenance or about a possible credit card scam. . I need to add that in my case modafinil tends to be effective only if I use it infreqiently - if I use it for 2 or more days in a row the effect diminishes rapidly. Also, if consumed late in the day it tends to mess up with my sleep schedule (which is fragile to start with) so I reserve it for the cases of bad night sleep and make sure to take it early in the morning (before 8am). . So, while modafinil is not addressing any critical medical need it, nonetheless, adds to my quality of life. I doubt that I would be able to get it without first self-educating and self-medicating myself. . Melatonin . Maybe due to my unhealthy habit of invading my night time and using it for work/study I developed sleep-related issues (insomnia, delayed sleep onset). While I tend to blame my 20s and 30s for it (later I consciously started avoiding “night shifts”) it may be due to genetics, too, as both my parents have similar issues (in particular my mom has very irregular sleep pattern) . By chance I stumbled on gwern’s excellent blog and decided to try Melatonin as a way to accelerate sleep onset. I also checked the literature - Melatonin seems safe even in long-term use. . My experience with it is positive but, still, not completely encouraging. . It, indeed, helped with accelerating sleep onset. However, not all was great. . Firstly, I noticed that I need to regularly increase the dosage to get the same effect. I started with 2mg and than had to transition to 3mg and than to 4mg. . Secondly, I noticed that it limits my sleep to 6 hours. I initially thought that this may be helped by replacing the regular pills with slow-release ones. Didn’t change anything. Gwern finds this sleep reduction to be a good thing. I am not so sure about it. After a few such nights I start to feel groggy. It seems that I need a longer sleep to feel refreshed. . Thirdly, I noticed on my Amazfit report that when I take Melatonin my deep sleep, essentially, disappears - all I get is light sleep and REM. This might explain why I feel groggy after 2 or 3 nights of Melatonin-induced sleep. . So, I am not a big fan of Melatonin. But I still use it if I find myself sleepless at 2am (which happens at least 2-3 times per month). . I’m aware that this may be not a great example in favor of self-medication as melatonin is an established non-prescription treatment for insomnia but I think that it still illustrates that it is a good idea to self-educate and experiment once you establish that the possible benefits outweigh any risks. . Psoriasis . Till my 40s I never had issues with psoriasis. But it runs in the family so I might have some genetic predisposition. A few years ago I had some difficult time in my personal life. It had effects on my health, too. This was the first time (and so far the last) when I experienced issues with psoriasis. . I went to my GP and got prescribed an ointment. I used it for a few weeks to no effect. Than I went again and got prescribed another one. The second one had some modest effect after a few weeks of usage. I can’t recall the brands of the ointments and since I can’t access my prescriptions (NHS is great with storing all your prescriptions electronically but does not trust you with your own data) I can’t add much details. I only remember that one of the ointments (likely the second one) contained betamethasone. . At the end, I did some extensive research in both patient forums and in the literature and I found references to ultraviolet therapy which seemed promising. So I ordered from Amazon or Ebay an ultraviolet lamp. I was careful to limit the exposure of psoriasis spots to violet light to the recommended limits. And - voila! - it solved the issues in just 2 weeks. . I continued using the second ointment during that time so I can’t attribute the affect only to the lamp but I am inclined to think that it was the lamp which produced most of the impact. . On this occasion my own self-research and self-medication solved a real health issue. . TL;DR . I believe that self-education and informed self-experimentation are important elements in taking care of your health and well-being - and that they should be encouraged. .",
            "url": "/2021/07/05/self-medication.html",
            "relUrl": "/2021/07/05/self-medication.html",
            "date": " • Jul 5, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Защо България хаби милиарди за да придобие 2 кораба?",
            "content": "Поводът за тази пост е днешната статия в Капитал. . Накратко: България смята да плати почти 2 милиарда лева за придобиването на 2 стражеви кораба. . Истината е, че целият проект е дълбоко сбъркан. . БГ няма нужда от кораби с параметрите на фрегата (каквито са поръчаните в момента стражеви кораби), а от доста по-малки кораби (корвети или дори по-малки). . Шведският пример . Най-добре въоръжените кораби на шведския флот не са фрегати, а корветите клас Visby . . Tе струват по 180 млн долара бройката (т.е. са 3 пъти по-евтини от стражевите кораби, който България се опитва да придобие). По-ниската цена идва от по-малкия размер - това пести много материали, изисква двигател с по-малка мощност и т.н. . Тези по-малки кораби са и по-евтини за експлоатация - харчат по-малко гориво, изискват в пъти по-малък екипаж. . Швеция е държава с 10 млн население и брегова ивица в Балтийско и Северно море с обща дължина от над 3000км. . Щом за Швеция малка корвета като Висби е адекватен избор защо България изисква съществено по-големи (и по-скъпи) кораби за да охранява 350км брегова ивица? . Финландският пример . Подобна е ситуацията с Финландия. Там най-боеспособните кораби са стражевите кораби от клас Hamina . . Те струват по 120 млн евро бройката (4 пъти по-евтини от корабите, които БГ се опитва да придобие. . Финландската брегова ивица заедно с островите е 4600км. . Щом Финландия може с такива кораби да охранява такава брегова линия защо България има нужда от съществено по-големи (и по-скъпи) кораби за да охранява 350км брегова ивица? . Хърватският пример . А, всъщност, най-добрия подход е този на Хърватско. Те имат БВП близък до нашия, но много по-голяма брегова ивица (1500км, а с островите над 5000км). . Вместо да инвестират в скъпи стражеви кораби те са инвестирали в подвижни брегови ракетни батареи. Това е, на практика, камион с ракетна установка и още един камион (или ремарке) с радар. . . Такава батарея струва общо 30-тина милиона евро заедно с мунициите (т.е. в пъти по-евтин от финландския стражеви кораб). А експлоатацията е поне 20 пъти по-евтина защото тези камиони харчат много по-малко горива и са с общо 5-6 души екипаж. Обсегът на тези ракети е до 300км (има и по-нови с по-голям обсег) и така с няколко такива батареи Хърватско покрива цялата си акватория. Такова решение би било най-добро и за БГ. . Тези ракети биха защитили нашата акватория срещу крупни кораби. Това, което остава да се осигури е: . противоминна защита (вече имаме кораби за това) | защита срещу подводници (имаме хеликоптери, но трябва да купим сонари за тях, както и торпеда - един комплект сонари е 10-тина млн долара, торпедата са по няколкостотин хиляди долара) | защита срещу малки плавателни съдове (имаме такива съдове, но може да ъпгрейднем като купим бързоходни катери като израелските Dvora - те струват по 6 млн долара). | . На кратко, за общо 200 млн лева (10 пъти по-малко от 2-та милиарда дето ще отидат за 2-та стражеви кораба) можем: . да купим 2 мобилни брегови ракетни установки покриващи цялата ни акватория | да въоръжим със сонари и торпеда 1 хеликоптер | да купим 4 високоскоростни катера Dvora | . Реално, като бойни възможности този комплект значително превъзхожда 2-та стражеви кораба взети заедно. А струва 10 пъти по-малко. И експлоатацията е поне 20-30 пъти по-евтина. .",
            "url": "/2021/06/23/bg-navy01.html",
            "relUrl": "/2021/06/23/bg-navy01.html",
            "date": " • Jun 23, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Numpy Array Ranks and Reshaping",
            "content": "A lot of numpy functions generate rank 1 arrays. A simple example: . import numpy as np x = np.linspace(0,1) x.shape . (50,) . The shape attribute of a numpy array is a tuple listing the size of each of its dimensions (axes). In this case there is just one dimension. The number of dimensions/axes is simply the length of its shape attribute: . len(x.shape) . 1 . An array of rank 1 is called a vector. Which is not the same as matrix with one column. . The problem is that a lot of scikit functions require matrices (e.g. submitting the training data has to be in the form of a matrix even if it contains just one feature). So if you try submitting a vector you get the common &quot;ValueError: Expected 2D Arrays, got 1D array instead&quot;. . This is where reshaping becomes necessary. . x2 = x.reshape(-1,1) x2.shape . (50, 1) . Now the new array x2 is of rank 2 (has two dimensions) - the first is of size 50, and the second is of size 1. . What is the meaning of -1 here? . It simply acts as a placeholder - the size of that axis is determined depending on the size of the other axes. In this particular case we asked that the second axis is of size 1 so in order to be able to accommodate all the elements the first axis of the new array has to be of size 50. . This is how usually the reshaping is performed. At least, this is how I have been doing it. But a lecture of Jeremy Howard made me aware of other ways to achieve the same result. . x2 = x[:, None] x2.shape . (50, 1) . In the above example we used slicing to achieve the same result. The colon (:), essentially, means &#39;get everything from that axis&#39;. &#39;None&#39; simply adds an axis of length 1. And it can be added anywhere: . x2 = x[None, :] x2.shape . (1, 50) . In this particular case we added axis of length 1 as a first axis. . We can, actually, achieve the same by omitting the colon: . x2 = x[None] x2.shape . (1, 50) . But so far our example was related to adding one dimension to a 1D array. What if the array has originally more dimensions? . We can explicitly specify them. Or, if the new dimension is supposed to be appended than we can do it this way: . x2 = x[...,None] x2.shape . (50, 1) . There is yet another way to reshape (not mentioned by Jeremy): . x2 = x[:] #the slicing is just another way to create a copy of x x2.shape = (50,1) x2.shape . (50, 1) . Summary . The vectors and matrixes are just n-dimensional arrays. In the case of vectors n = 1. . Even though the content of a vector may be the same as a matrix with 1 column they are still considered arrays of different dimensions. Thus it is often necessary to convert a vector to a corresponding matrix. This can be performed in 3 different ways: . By using reshape(-1,1). This generates a new 2D array with the last one being of size 1. | By slicing and using &#39;None&#39; to add a dimension of size 1. | By changing the shape attribute of the vector. |",
            "url": "/2021/01/26/numpy-array-ranks-reshapes.html",
            "relUrl": "/2021/01/26/numpy-array-ranks-reshapes.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Accepting a Credit Card: a SaaS application in a nutshell (Stripe, Rails4, Devise3)",
            "content": "Recently I blogged about a light-touch workflow which allows registration without setting a password. This blog post and the accompanying git repository take it from there and add credit card registration via Stripe. I was thinking of what could the absolutely minimal SaaS application and came with the conclusion that it recording the credit card details constitutes the absolutely irreducable bit - without it you can’t have a SaaS application. So, this lengthy blog post is about creating such a minimal SaaS application that does nothing but allowing people to sign up and record their credit card details. . In realistic scenarios applications would first allow free trials and than at their expiry would prompt users to submit their credit card. Many would apply some version of a freemium model where the users can keep a free account but would be regularly tempted to upgrade. This would be too complicated for the purposes of this blog post. So we would simply collect the credit card details upfront at the registration. . 1. Pre-requisites . This tutorial assumes that people have already set up a minimal application allowing a password-less registration using Devise as described in a previous post. Another pre-requisite is a registration with Stripe. . 2. Adding Stripe and Papertrail . The starting point for this tutorial is the code for the earlier blog post. The first change is, of course, adding Stripe to the Gemfile: . gem &quot;stripe&quot;, &#39;1.21&#39; . Another gem that we would add is Papertrail. It allows us to create an auditable trail for any changes to selected models. Strictly speaking, adding an auditable trail does not meet the requirement of being absolutely irreducible but it is a good practice to follow in real life so we would include it: . gem &#39;paper_trail&#39;, &#39;~&gt; 3.0.6&#39; . We also need to execute . rails generate paper_trail:install --with-changes . Stripe uses public and private keys to authenticate the user - these can be found in the user profile upon registering. Rails needs to know these keys to be able to authenticate. We add /config/initializers/stripe.rb: . Rails.configuration.stripe = { publishable_key: RailsDevise.config.STRIPE_PUBLISHABLE_KEY, secret_key: RailsDevise.config.STRIPE_SECRET_KEY } Stripe.api_key = Rails.configuration.stripe[:secret_key] . At the end of this step the code base shall be identical to commit dd2e27875863d14f2e1fcfb1c76ea61824781afa. . You need, of course, to run . bundle install . to install the gems. . The code above uses the econfig gem to load the environment variables and database credentials. I’m storing these in config/secrets.yml (you just need to enter your values): . development: STRIPE_PUBLISHABLE_KEY: &quot;&quot; STRIPE_SECRET_KEY: &quot;&quot; MANDRILL_USERNAME: &quot;&quot; MANDRILL_API_KEY: &quot;&quot; MANDRILL_DOMAIN: &quot;&quot; RETURN_EMAIL: &quot;&quot; DEVISE_SECRET: &quot;&quot; secret_key_base: &quot;&quot; . 3. Generating models for a nutshell SaaS application . The minimal models needed for a SaaS application requires a plan and a subscription: . rails g model plan stripe_id:string name:string rails g model subscription user:references plan:references stripe_id:string . Usually, a plan has a price and an interval (e.g. monthly, weekly, etc.) associated with it. We will define this within Stripe. To keep our application DRY we will include in our database is, essentially, only pointers to the data stored in Stripe. We would need the same pointer in the user table: . rails g migration AddStripeCustomerIdToUser stripe_customer_id:string . We’ll tighten up the subscription model a bit by setting the foreign keys to be NOT NULL: . class AddChangeColumnNullSubscription &lt; ActiveRecord::Migration def change change_column_null :subscriptions, :user_id, false change_column_null :subscriptions, :plan_id, false end end . We’ll also add an audit trail to the models (example below is for Plan but the change is identical for the other two models): . class Plan &lt; ActiveRecord::Base has_paper_trail end . At the end we need to run . rake db:migrate . 4. Creating Stripe plans . We will create . #app/services/create_plan.rb class CreatePlan def self.call(options={}) Rails.logger.info &quot;Creating plan &quot; + options[:name].to_s + &quot;..&quot; plan = Plan.new(stripe_id: options[:stripe_id], name: options[:name]) Rails.logger.info &quot;Plan &quot; + options[:name].to_s + &quot; created!&quot; if !plan.valid? Rails.logger.info &quot;Plan not valid..&quot; Rails.logger.info plan.errors.full_messages return plan end begin splan = Stripe::Plan.create( id: options[:stripe_id], amount: options[:amount], currency: options[:currency], interval: options[:interval], trial_period_days: options[:trial_period_days], name: options[:name] ) Rails.logger.info &quot;stripe insert went well..&quot; Rails.logger.info splan.created rescue Stripe::StripeError =&gt; e Rails.logger.info &quot;stripe insert did not go well..&quot; if e.message != &quot;Plan already exists.&quot; Rails.logger.error e.message plan.errors[:base] &lt;&lt; e.message return plan else Rails.logger.info &quot;Plan already exists.&quot; Rails.logger.error e.message end end plan.save return plan end end . and . #db/seeds.rb CreatePlan.call(stripe_id: &#39;basic&#39;, name: &#39;Basic&#39;, amount: 999, interval: &#39;month&#39;, currency: &#39;gbp&#39;, trial_period_days: 5) CreatePlan.call(stripe_id: &#39;standard&#39;, name: &#39;Standard&#39;, amount: 2999, interval: &#39;month&#39;, currency: &#39;gbp&#39;, trial_period_days: 5) CreatePlan.call(stripe_id: &#39;pro&#39;, name: &#39;Pro&#39;, amount: 9999, interval: &#39;month&#39;, currency: &#39;gbp&#39;, trial_period_days: 5) . Running . rake db:seed . shall create the plans in Stripe. You can verify that this was successful by logging in your Stripe account: . . 5. Creating Subscription services . In this tutorial we’ll encapsulate the subscription workflow in two services - one creating the Stripe subscription and another creating the corresponding subscription in our database. The latter shall occur only if the former was successful. This is marked difference to some other Stripe SaaS tutorials, most notably the one by Pete Keen and the one by Daniel Kehoe (which is to a large extent based on Pete’s). In the mentioned tutorials the creation of subscription in our database occurs even if creating the Stripe subscription fails (e.g. by providing invalid credit card details). This, in my opionion, is a serious flaw. None of these tutorials claim that their code is of production-level quality but I find it wrong to have such shortcoming even in an introductory tutorial as such code snippets tend to eventually propagate in production systems created by inexperienced or inobservant users. . Here is the code for the service creating the Stripe subscription: . #app/services/create_stripe_subscription.rb class CreateStripeSubscription def self.call(plan, email_address, token) Rails.logger.info &quot;CreateStripeSubscription: email = &quot; + email_address + &quot;, plan.stripe_id = &quot; + plan.stripe_id stripe_sub = nil customer = nil begin stripe_customers = Stripe::Customer.all stripe_customers.each do |row| if row.email == email_address customer = Stripe::Customer.retrieve(row.id) end end if customer.nil? Rails.logger.info &quot;CreateStripeSubscription: Stripe Customer does NOT exist&quot; customer = Stripe::Customer.create( source: token, email: email_address, plan: plan.stripe_id, ) stripe_sub = customer.subscriptions.first Rails.logger.info &quot;CreateStripeSubscription: Stripe User ID = &quot; + customer.id.to_s + &quot;, Stripe Subscr ID = &quot; + customer.subscriptions.first.id.to_s else Rails.logger.info &quot;CreateStripeSubscription: Stripe Customer exists&quot; stripe_sub = customer.subscriptions.create( plan: plan.stripe_id ) Rails.logger.info &quot;CreateStripeSubscription: Stripe User ID = &quot; + customer.id.to_s + &quot;, Stripe Subscr ID = &quot; + customer.subscriptions.first.id.to_s end rescue Stripe::StripeError =&gt; e Rails.logger.error &quot;CreateStripeSubscription failed: &quot; + e.message if !stripe_sub.nil? stripe_sub.errors[:base] &lt;&lt; e.message end end stripe_sub end end . And here is the code for creating the subsequent subscription in our application database: . #app/services/create_subscription.rb class CreateSubscription def self.call(plan, email_address, token) #Create Stripe Subscription stripe_sub = CreateStripeSubscription.call( plan, email_address, token ) if !stripe_sub.nil? #Look for an user with this email. If not exists - create. user = User.find_by_email(email_address) if user.nil? Rails.logger.info &quot;CreateSubscription: User is nil!&quot; generated_password = Devise.friendly_token.first(8) user = User.new(:email =&gt; email_address, :password =&gt; generated_password, :password_confirmation =&gt; generated_password, :stripe_customer_id =&gt; stripe_sub.customer) if user.valid? Rails.logger.info &quot;CreateSubscription: User is valid!&quot; end user_saved = user.save if !user_saved Rails.logger.error &quot;CreateSubscription: User not saved!&quot; user.errors.each do |attribute, message| Rails.logger.error &quot; CreateSubscription: user.error = &quot; + message end else Rails.logger.info &quot;CreateSubscription: User saved&quot; end else #TODO: This is a case of someone registering repeatedly (or a past user?). Need to think more on what to do. Rails.logger.info &quot;CreateSubscription: User existed!&quot; end if !user.nil? &amp;&amp; !user.errors.any? #Create a new Subscription Rails.logger.info &quot;CreateSubscription: user.email = &quot; + user.email subscription = Subscription.new( plan: plan, user: user ) subscription.stripe_id = stripe_sub.id subscription.save! Rails.logger.info &quot;CreateSubscription: Subscription saved&quot; else Rails.logger.info &quot;CreateSubscription: Conditions not met to save Subscription&quot; end else #Flash Message to be handled in controller end generated_password end end . As you can see, the latter service calls the former and proceeds depending on its outcome. . 6. Changing the controllers . In Step 3 above we added attribute to the User model which stores the reference to the customer ID as set in Stripe. The strong parameters in Rails 4 make it necessary to “whitelist” this attribute if we want to set it via mass assignment at the registration. The following change in the application controller accoomplishes this task: . #app/controllers/application_controller.rb class ApplicationController &lt; ActionController::Base # Prevent CSRF attacks by raising an exception. # For APIs, you may want to use :null_session instead. protect_from_forgery with: :exception before_action :configure_devise_permitted_parameters, if: :devise_controller? protected def configure_devise_permitted_parameters registration_params = [:email, :password, :password_confirmation] if params[:action] == &#39;update&#39; devise_parameter_sanitizer.for(:account_update) { |u| u.permit(registration_params) # stripe_customer_id should not be updateable } elsif params[:action] == &#39;create&#39; devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(registration_params &lt;&lt; :stripe_customer_id) } end end end . The relevant line is . |u| u.permit(registration_params &lt;&lt; :stripe_customer_id) . in the “create” action. We are adding the stripe_customer_id to the “white list”. . The other controller we need to change is the Devise registrations controller: . #app/controllers/registrations_controller.rb class RegistrationsController &lt; Devise::RegistrationsController before_filter :load_plans def new @subscription = Subscription.new super end def edit super end def destroy super end def cancel super end # POST /resource def create build_resource(sign_up_params) generated_password = CreateSubscription.call( @plan, params[:email_address], params[:stripeToken] ) #resource_saved = resource.save if !generated_password.nil? user = User.find_by_email(params[:email_address]) if !user.nil? resource_saved = true resource = user else Rails.logger.error &quot;RegistrationsController#create user is nil!&quot; end MyMailer.welcome(resource, generated_password, {plan: @plan}).deliver_now if resource_saved else Rails.logger.error &quot;RegistrationsController#create failed to register with Stripe!&quot; flash[:error] = &quot;Could not register: either card details wrong or no connection to server&quot; end yield resource if block_given? if resource_saved if resource.active_for_authentication? set_flash_message :notice, :signed_up if is_flashing_format? sign_up(resource_name, resource) respond_with resource, location: after_sign_up_path_for(resource) else set_flash_message :notice, :&quot;signed_up_but_#{resource.inactive_message}&quot; if is_flashing_format? expire_data_after_sign_in! respond_with resource, location: after_inactive_sign_up_path_for(resource) end else clean_up_passwords resource @validatable = devise_mapping.validatable? if @validatable @minimum_password_length = resource_class.password_length.min end respond_with resource end end def update super end protected def load_plans @plans = Plan.all @plans.each do |row| Rails.logger.info &quot;RegistrationsController#load_plans: Looping through the Plans..&quot; Rails.logger.info row.inspect end @plan = Plan.find(params[:plan_id]) if @plan.nil? Rails.logger.error &quot;RegistrationsController#load_plans: plan is nil!&quot; else Rails.logger.info &quot;RegistrationsController#load_plans: plan is NOT nil!&quot; end end end . As you can see, we override the create action to call the subscription service and proceed depending on its outcome. . 6. Changing the views . First, we need to add an information on the plans available for subscription. We do this in the index view of the visitor controller: . &lt;% if user_signed_in? %&gt; &lt;% else %&gt; &lt;div id=&quot;welcome&quot; class=&quot;span7&quot;&gt; &lt;h1&gt;Stripe SaaS Tutorial&lt;/h1&gt; &lt;h3&gt;Learn how to build a subscription site&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;row col-sm-12 plans&quot;&gt; &lt;div class=&quot;col-sm-2 well&quot;&gt; &lt;div class=&quot;plan&quot;&gt;&lt;h2&gt;Basic&lt;/h2&gt;&lt;/div&gt; &lt;ul class=&quot;list-unstyled&quot;&gt; &lt;li&gt;One unit a month&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;£9.99/month&lt;/h3&gt; &lt;%= link_to &#39;Subscribe&#39;, new_user_registration_path(plan_id: 1), :class =&gt; &#39;btn btn-primary&#39; %&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-2 well featured&quot;&gt; &lt;div class=&quot;plan featured-plan&quot;&gt;&lt;h2&gt;Standard&lt;/h2&gt;&lt;/div&gt; &lt;ul class=&quot;list-unstyled&quot;&gt; &lt;li&gt;Ten units a month&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;£29.99/month&lt;/h3&gt; &lt;%= link_to &#39;Subscribe&#39;, new_user_registration_path(plan_id: 2), :class =&gt; &#39;btn btn-primary&#39; %&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-2 well&quot;&gt; &lt;div class=&quot;plan&quot;&gt;&lt;h2&gt;Pro&lt;/h2&gt;&lt;/div&gt; &lt;ul class=&quot;list-unstyled&quot;&gt; &lt;li&gt;Thirty units a month&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;£99.99/month&lt;/h3&gt; &lt;%= link_to &#39;Subscribe&#39;, new_user_registration_path(plan_id: 3), :class =&gt; &#39;btn btn-primary&#39; %&gt; &lt;/div&gt; &lt;/div&gt; &lt;% end %&gt; . Thus, the starting page of our application would look like this: . . The next change is to the registration view which collects the credit card info: . &lt;div class=&quot;authform&quot;&gt; &lt;h3&gt;Subscribing to &lt;%= @plan.name %&gt;&lt;/h3&gt; &lt;%= form_for(resource, :as =&gt; resource_name, :url =&gt; registration_path(resource_name), :html =&gt; { :role =&gt; &#39;form&#39;}) do |f| %&gt; &lt;input type=&quot;hidden&quot; name=&quot;plan_id&quot; value=&quot;&lt;%= @plan.id %&gt;&quot; /&gt; &lt;span class=&quot;payment-errors&quot;&gt;&lt;/span&gt; &lt;div class=&quot;form-row&quot;&gt; &lt;label&gt; &lt;span&gt;Email Address&lt;/span&gt; &lt;input type=&quot;email&quot; size=&quot;20&quot; name=&quot;email_address&quot;/&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;form-row&quot;&gt; &lt;label&gt; &lt;span&gt;Card Number&lt;/span&gt; &lt;input type=&quot;text&quot; size=&quot;20&quot; data-stripe=&quot;number&quot;/&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;form-row&quot;&gt; &lt;label&gt; &lt;span&gt;CVC&lt;/span&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; data-stripe=&quot;cvc&quot;/&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;form-row&quot;&gt; &lt;label&gt; &lt;span&gt;Expiration (MM/YYYY)&lt;/span&gt; &lt;input type=&quot;text&quot; size=&quot;2&quot; data-stripe=&quot;exp-month&quot;/&gt; &lt;/label&gt; &lt;span&gt; / &lt;/span&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; data-stripe=&quot;exp-year&quot;/&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot;&gt;Pay Now&lt;/button&gt; &lt;% end %&gt; &lt;/div&gt; . It would look like this: . . We will also change the mailer view so that the user gets info on both password he was assigned (as I have specifically focused in this and previous tutorial on password-less registration) and the plan he has chosen: . &lt;p&gt;Welcome to Our Application!&lt;/p&gt; &lt;p&gt;You have signed up for the &lt;%= @plan.name %&gt; plan.&lt;/p&gt; &lt;p&gt;We&#39;ve generated a password for you: &lt;%= @token %&gt;&lt;/p&gt; &lt;p&gt;If you prefer you can change it (under &quot;Account/Settings&quot;).&lt;/p&gt; . That’s it. Now you can test. Stripe has a list of credit card numbers to test specific test scenarios. The number 4242 4242 4242 4242 always succeeds - you can test with it but make sure to set the date of validity of the credit card in the future. . Voila! . 7. Further info and credits . The best accompanying source to this tutorial is the corresponding git repository. The current commit is 427de90f1055895ded68f1f5e3c587334f64730b. . I’ve learned a lot from Pete Keen’s “Mastering Modern Payments” and from Daniel’s Kehoe Rails SaaS example (the above git repository is a fork of a Stripe-unrelated git repository of him). But, of course, most instructive was playing with Stripe’s excellent API. .",
            "url": "/2015/08/04/accepting-credit-card-stripe-saas.html",
            "relUrl": "/2015/08/04/accepting-credit-card-stripe-saas.html",
            "date": " • Aug 4, 2015"
        }
        
    
  
    
        ,"post5": {
            "title": "Overriding Devise to Skip Setting of Password (Rails4, Devise3)",
            "content": "I’ve been thinking about a light-touch workflow which allows a prospective user to register without setting a password. My first idea was to override the confirmable module (i.e. to invite the user to set a password as part of the confirmation) but I dropped it as it introduces an interim state (an unconfirmed account) and for me this is an unnecessary complication. My idea was to make the registration simpler and requiring a confirmation would be the exact opposite. . Thus I decided to override the default registration workflow so that Devise sets a password which is sent to the user. The user may decide than to change it or not - it would be the usual case of password management. There is a slight imperfection - the password is communicated in plain text. I know that this is not kosher but I decided I’d take this imperfection as I really want to achieve a light-touch registration interaction. . This lengthy blog post is, essentially, a tutorial how to do it - I’ve written it up as I couldn’t find an exact recipe so had to go through an try-and-error process till I got it working. . Starting with a default Devise example . So let’s start first with a relatively simple yet self-contained code example - Daniel Kehoe’s excellent Devise tutorial. I forked it here and simplified it a bit. The example uses Mandrill to handle the emails so you would need to register - a free account gives you a generous quota of 12K emails per month. . Let’s clone that commit. This is done by . git clone https://github.com/nikolay12/my_devise . followed by . git reset --soft 74a92e4ce4934f3e06a753c2d93e2127930192d0 . You need than to run . bundle install . The example uses the econfig gem to load the environment variables and database credentials. I’m storing these in secrets.yml (you just need to enter your values) . development: MANDRILL_USERNAME: &quot;&quot; MANDRILL_API_KEY: &quot;&quot; MANDRILL_DOMAIN: &quot;&quot; RETURN_EMAIL: &quot;&quot; DEVISE_SECRET: &quot;&quot; secret_key_base: &quot;&quot; . and database.yml: . development: adapter: postgresql encoding: utf8 database: my_devise pool: 5 username: password: host: 127.0.0.1 port: 5432 . The example uses postgres but you could use any other DB (in fact, the mysql gem is included in the Gemfile, too). Once the DB credentials are set you need to run . rake db:setup . If you’ve done everything correctly running . rails server . should give you . . Adding a customized RegistrationsController . As next we need to override the default RegistrationsController: . class RegistrationsController &lt; Devise::RegistrationsController def new super end def edit super end def destroy super end def cancel super end # POST /resource def create build_resource(sign_up_params) generated_password = Devise.friendly_token.first(8) resource.password = generated_password resource.save yield resource if block_given? if resource.persisted? if resource.active_for_authentication? set_flash_message :notice, :signed_up if is_flashing_format? sign_up(resource_name, resource) respond_with resource, location: after_sign_up_path_for(resource) else set_flash_message :notice, :&quot;signed_up_but_#{resource.inactive_message}&quot; if is_flashing_format? expire_data_after_sign_in! respond_with resource, location: after_inactive_sign_up_path_for(resource) end else clean_up_passwords resource set_minimum_password_length respond_with resource end MyMailer.welcome(resource, {password: generated_password}).deliver if resource.persisted? end def update super end end . Instead of typing/pasting the above code you can copy . /app/controllers/registrations_controller.rb . from the github repository but you’ll need to rebase it to include the latest commit (if you reset to the older commit as suggested above): . git reset HEAD@{1} . If you haven’t reset your local git repo than you wouldn’t need to do anything - a simple git clone has the code you need. . Adding customized views for the RegistrationsController . These are, basically, the default views which can be generated by . rails generate devise:views . However, they need to be placed under . app/views/registrations . A simple copy is what you need: . cp app/views/devise/registrations/* app/views/registrations/ . Than you can remove the password/password confirmation fields. . Changing the routes to account for the customized RegistrationsController . The other controller-related change that is necessary is to set the route to: . devise_for :users, :controllers =&gt; { :registrations =&gt; &quot;registrations&quot; } . Set a custom Devise mailer . The other remaining task is to set a cusomized mailer that sends the password upon registration. It is called by the RegistrationsController abobe. The mailer is simple: . #/app/mailers/my_mailer.rb class MyMailer &lt; Devise::Mailer helper :application # gives access to all helpers defined within `application_helper`. include Devise::Controllers::UrlHelpers # Optional. eg. `confirmation_url` def welcome(record, opts={}) devise_mail(record, :welcome, opts) end end . You also need to add the views and place them under the corresponding views sub-directory. You can copy the default views: . cp app/views/devise/mailer/* app/views/mymailer . and add the view that contains the password: . #app/views/my_mailer/welcome.html.erb &lt;p&gt;Welcome!&lt;/p&gt; &lt;p&gt;We&#39;ve generated a password for you: &lt;%= @resource.password %&gt;&lt;/p&gt; &lt;p&gt;If you prefer, please, feel free to change it (under &quot;Account/Settings&quot;).&lt;/p&gt; . That’s it! .",
            "url": "/2015/07/24/overriding-devise-to-skip-setting-of-password.html",
            "relUrl": "/2015/07/24/overriding-devise-to-skip-setting-of-password.html",
            "date": " • Jul 24, 2015"
        }
        
    
  
    
        ,"post6": {
            "title": "Защо дебатът за заплатата на управителя на БНБ подминава най-важното",
            "content": "В момента в България набира сили дебат (някои биха го нарекли скандал) за заплатата на управителя на БНБ. Както стана ясно тя заедно с разни добавки и премии е в размер на почти един милион лева. Не искам да се впускам в дебат за това много или малко е това. За мен такъв дебат се отклонява от най-важното, а то е - дали заплатата гарантира качествено свършена работа? . Всички знаем, че в случая с бившия шеф на БНБ това определено не е така. Някои използват това като аргумент срещу високия размер на заплатата. Според мен проблемът в случая е, че между заплата (колкото и да е голяма) и качество на работата в случая няма никаква връзка. Т.е. проблемът не е в размера на заплатата, а в това как е дефинирана връзката между нея и качеството на работа. . Това ми напомня дискусиите в западната преса след началото на на световната икономическа криза преди 7 години - криза, която дойде точно от банковия сектор. На Запад се обсъждат идеи част от възнаграждението на банкерите да бъде отложено във времето така, че ако впоследствие се открият злоупотреби, то въпросното възнаграждение да не се изплаща. Ето само някои линкове: тук, тук и тук. . В такова предложение има много смисъл защото проблемите обикновено се откриват впоследствие, докато възнаграждението се изплаща текущо - т.е. има разминаване във времето между заплащането на услугата и нейната обективна оценка. . Това предложение е много релевантно и в случая с председателя на БНБ. Както вече знаем, несвършената от него работа си проличава едва след няколко години. Редно е и част от възнаграждението му да се изплаща разсрочено във времето - примерно да се слага един вид в ескроу сметка и след, примерно, 7 години НС да взима решение дали да се изплати или не. . Апропо, това би било адекватно решение не само за възнаграждението на управителя на БНБ, но и за управителите на търговските банки. Както стана ясно, тяхното средно възнаграждение е от порядъка на един милион годишно (възнаграждението на председателя на БНБ се базира на средната заплата на управителите на търговските банки). А както вече знаем от примера с КТБ, това не гарантира нищо. В случая с КТБ въпросният милион е получаван ежегодно от шефа на КТБ в продължение на години абсолютно незаслужено и по същество ще се заплати от всички нас - данъкоплатците, които сега носим последствията от фалита на КТБ. Излишно е да казвам, че шефът на КТБ по всяка вероятност ще си задържи получените милиони. Та има много резон в това и възнаграждението на шефовете на търговските банки да бъде разсрочено във времето за да може те да са лично заинтересувани от това да не се стига до неприятни ситуации като тази. .",
            "url": "/2015/07/24/central-bank-salary.html",
            "relUrl": "/2015/07/24/central-bank-salary.html",
            "date": " • Jul 24, 2015"
        }
        
    
  
    
        ,"post7": {
            "title": "Moving from Blogspot",
            "content": "I’ve been thinking to move away from Blogspot for a while as I felt too constrained by the layout options and today I finally did it! . This is my first take on Jekyll and hosting on Github. So far it went smoothly. . My old blog will stay online - but I intend to eventually migrate the content here. .",
            "url": "/2015/07/23/moving-from-blogspot.html",
            "relUrl": "/2015/07/23/moving-from-blogspot.html",
            "date": " • Jul 23, 2015"
        }
        
    
  

  
  

  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}